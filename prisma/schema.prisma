generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String? // Cal.com username
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Tags          Tags[]
  Contacts      Contacts[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Color {
  red
  orange
  yellow
  green
  blue
  purple
  pink
  brown
  gray
  black
  white
}

model Tags {
  id        String   @id @default(cuid())
  contact   Contacts @relation(fields: [contactId], references: [id])
  contactId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  name      String
  color     Color
}

enum CheckInTime {
  Rarely
  Occasionally
  Often
}

model Contacts {
  id               String      @id @default(cuid())
  user             User        @relation(fields: [userId], references: [id])
  userId           String
  url              String? // Cal.com URL cal.com/username
  username         String // Cal.com username - Required to call the API and check availability
  checkInFrequency CheckInTime
  tags             Tags[]
  createdAt        DateTime    @default(now())
}
