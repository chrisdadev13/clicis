generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  username      String?
  name          String?
  apiKey        String?    @unique
  calId         Int?       @default(0)
  timeZone      String?    @default("")
  weekStart     String?    @default("")
  accounts      Account[]
  contacts      Contacts[]
  sessions      Session[]
  checkins      CheckIns[]

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//model Tags {
//  id        String   @id @default(cuid())
//  contactId String
//  name      String
//  color     Color
//  userId    String
//  contact   Contacts @relation(fields: [contactId], references: [id])
//  user      User     @relation(fields: [userId], references: [id])
//}

model Contacts {
  id               String       @id @default(cuid())
  calId            Int?         @default(0)
  url              String
  username         String
  name             String
  checkInFrequency CheckInTime
  createdAt        DateTime     @default(now())
  userId           String
  tag              String
  active           Boolean      @default(true)
  user             User         @relation(fields: [userId], references: [id])
  checkins         CheckIns[]
  eventType        EventTypes[]
}

model EventTypes {
  id        String   @id @default(cuid())
  calId     Int?     @default(0)
  title     String
  slug      String
  contactId String
  contact   Contacts @relation(fields: [contactId], references: [id])
}

model CheckIns {
  id          String   @id @default(cuid())
  contactId   String
  contact     Contacts @relation(fields: [contactId], references: [id])
  userId      String
  startDate   DateTime
  endDate     DateTime
  timeZone    String
  title       String
  description String?
  status      String
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

enum Color {
  red
  orange
  yellow
  green
  blue
  purple
  pink
  brown
  gray
  black
  white
}

enum CheckInTime {
  Rarely
  Occasionally
  Often
}
